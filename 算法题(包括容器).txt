1、mencpy函数实现
void * my_mencpy(void *dst, const void *src, unsigned count)
{
	if(dst == nullptr || src == nullptr) return nullptr;
	char *pdst = (char*)dst;
	char *psrc = (char*)src;
	while(count--)
	{
		*pdst++ = *psrc++;
	}
	return dst;
}

2、strcpy函数实现
char *my_strcpy(char* dst, const char* src)
{
	if(dst == nullptr || src == nullptr) return nullptr;
	char* temp = dst;
	while( (*dst++ = *src++) != '\0' ) ;
	return temp;
}


https://blog.csdn.net/qq_42379345/article/details/81635378             <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<------------------------------需要看

3、冒泡排序         // https://www.cnblogs.com/bigdata-stone/p/10464243.html
原理：比较两个相邻的元素（两两相比），将值大的元素交换到右边
N个数字要排序完成，总共进行N-1趟排序，第i趟的排序次数为(N-i)次，所以可以用双重循环语句，外层控制循环多少趟，内层控制每一趟的循环次数
每进行一趟排序，就会少比较一次，因为每进行一趟排序都会找出一个较大值。如上例：第一趟比较之后，排在最后的一个数一定是最大的一个数，第二趟排序的时候，只需要比较除了最后一个数以外的其他的数，同样也能找出一个最大的数排在参与第二趟比较的数后面，第三趟比较的时候，只需要比较除了最后两个数以外的其他的数，以此类推……也就是说，没进行一趟比较，每一趟少比较一次，一定程度上减少了算法的量。

for(int i = 0; i < n-1; i++){      //控制外循环，总共进行N-1趟排序
	for(int j = 0; j < n-1-i; j++){   //内层控制每一趟的循环次数（同一行里的比较次数）
		if(a[j] > a[j+1]){        //注意：是同一行里的两两比较
			temp = a[j];
			a[j] = a[j+1];
			a[j+1] = temp;
		}
	}
}

原理：一个位置依次与其他位置的元素比较，将值大的元素交换到右边
for(int i = 0; i < n -1; i++) {
    for(int j = i + 1; j < n; j++) {
        if(a[i] > a[j]) {
            temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }
    }
}


4、快速排序



5、二分查找



6、创建一个单向链表，插入十个数据



7、创建一个二叉树，插入十个数据



8、创建一个检查某个词是否回文的函数



9、通用二元一次方程函数（模板？）





https://blog.csdn.net/Windgs_YF/article/details/82115425
https://blog.csdn.net/lym940928/article/details/88377649
https://blog.csdn.net/Augurlee/article/details/106769523
10、c++的STL中，有哪几种容器？底层实现(底层数据结构)？应用场景？
(1)、标准STL序列容器：vector、string、deque和list；
(2)、标准STL关联容器：set、multiset、map和multimap；
(3)、非标准序列容器：slist(单向链表)和rope(重型字符串)；
(4)、非标准关联容器：hash_set、hash_multiset、hash_map和hash_multimap；
(5)、标准非STL容器：数组、bitset、valarray、stack、queue和priority_queue


vector(动态扩容数组)：连续存储的元素
list(双向链表)：由节点组成的双向链表，每个结点包含着一个元素
map(红黑树)：由{键，值}对组成的集合，以某种作用于键对上的谓词排列(红黑树是平横二叉树的一种)
multimap()：允许键对有相等的次序的映射
set()：由节点组成的红黑树，每个节点都包含着一个元素，节点之间以某种作用于元素对的谓词排列，没有两个不同的元素能够拥有相同的次序
multiset()：允许存在两个次序相等的元素的集合
deque()：连续存储的指向不同元素的指针所组成的数组
queue()：先进先出的值的排列
stack()：后进先出的值的排列


(1)、删除容器中具有特定值的元素：如果容器是vector、string或deque，使用erase-remove的惯用法(remove只会将不应该删除的元素前移，然后返回一个迭代器，该迭代器指向的是那个应该删除的元素，所以如果要真正删除这一元素，在调用remove之后还必须调用erase)；如果容器时list，使用list::remove；如果容器是标准关联容器，使用它的erase成员函数；
(2)、删除容器中满足某些条件的所有元素：如果容器是vector、string或deque，使用erase-remove_if惯用法；如果容器是list，使用list::remove_if；如果容器是标准关联容器，使用remove_copy_if & swap组合算法，或者自己写一个遍历删除算法。




设计栈  入栈  出栈  找最小元素
设计string  成员
编写简单的回显函数
写一个判定任意二进制树height的程序
图像边缘检测原理

vector可先用resize申请空间，不用等到要用时由自身申请（速度慢）
查询多，插入少  用什么？为什么？
通信、linux系统编程
联系使用ifstream、stringstream
socket通信（了解：127.0.0.1::port1能不能与127.0.0.1::port2建链）
子进程与父进程（fock函数启动一个新的进程，这个进程几乎是当前进程的一个拷贝：子进程和父进程使用相同的代码段；子进程复制父进程的堆栈段和数据段）（函数簇exec用来启动另外的进程以取代当前运行的进程，对当前进程进行替换。）

数据库的使用（truncate仅删数据不删表）

class Win1:public QMainWindow{
private:
	Win2 *win2Inst;
}
question：怎么知道Win1是否new过Win2？
构造函数里：win2Inst=nullptr；以后检车win2Inst==nullptr就知道有没有new过。

文件：
#include <iostream>
using namespace std;
#include "fstream"
int main()
{
	char fileName[80];
	char buffer[255];

	cout << "请输入一个文件名: ";
	cin >> fileName;

	ofstream fout(fileName, ios::app);
	fout << "1111111111111111111\n";
	fout << "22222222222222222\n";
	cin.getline(buffer,255); //从键盘输入
	fout << buffer << "\n";
	fout.close();

	ifstream fin(fileName);
	cout << "Here's the the content of the file: \n";
	char ch;
	while(fin.get(ch))
		cout << ch;

	cout << "\n***End of file contents.***\n";
	fin.close();
	system("pause");
	return 0;
}


逻辑题:
、从一副牌中抽取两张，同一花色地出现概率是多少？



编程实现从 1 加到 100 和从 100 加到 1 两个程序，哪个更快？    参考：https://www.zhihu.com/question/316554171
开编译器优化的情况：编译器直接算出结果5050（测试过是有一定范围的，算1到100000时就是：1加到n比n加到1多一个cmp指令）
不开编译器优化的情况：时操指令数量上没啥差别（并没有出现网上说的，100加到1有出现jnz指令，然后jnz指令要明显快于cmp之后再jne）





以下需要联系运算符优先级学习，比如   int i=1，j=2，求表达式i+++j的值？

整理下  a++，++a  ???      //i++和++i的区别:  i++是先用后加，直接执行i+1然后返回i的引用 ++i是先加后用，先创建i的副本然后i+1，最后返回副本  ???
#include <stdio.h>
#include <iostream>
using namespace std;
#define MU(a) ((a)*(a)*(a))
int main(int argc,char *argv[])
{
	int i = 10;
	/*int Sum = Add(i);
	printf("sUM1 = %d\n",Sum);
	int sum = MU(++i);
	printf("i = %d MU = %d\n",i,sum);*/

	printf("%d %d %d %d\n", ++i,i++,i++,i++);
	i = 10;
	//printf("%p %p %p\n", i++,++i,i);
	printf("%d\n",i);
	printf("%d %d %d %d\n", i,i,i++,i++);
	i = 10;
	printf("%d %d\n", i++,i++);
	i = 10;
	printf("%d %d\n", ++i,++i);
	i = 10;
	cout<<++i<<","<<i++<<endl;
	i = 2;
	printf("%d %d %d \n",i*=2,++i,i++);
	return 0;
}