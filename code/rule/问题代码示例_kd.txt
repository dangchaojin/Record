------------------------------------------------------------------
1. 逻辑值参与+-数学运算
static void  ReadStreamMediaFromOldFile(TStreamMedia& tStream )
{
	s8 Section[] ="mtStreamMediaTable";
	s8 Key[] = "entry0";
	s8 abyBuf[100];
	s8 abyVal[5][20];
	memset(abyVal, 0, sizeof(abyVal));
	s32 dwVal;
	tStream.bForwardLocalVideo = FALSE;
    if(ReadStringVal(abyBuf,sizeof(abyBuf),Section,Key))
	{
		sscanf(abyBuf,"%[^,],%[^,],%[^,],%[^,],%[^,]",
		   abyVal[0],
		   abyVal[1],
		   abyVal[2],
		   abyVal[3],
		   abyVal[4]
		  );
		sscanf(abyVal[0],"%d",&dwVal);
		tStream.bUse = dwVal;
		if(tStream.bUse > 0)
		{
			tStream.bUse -= 1;
		}
------------------------------------------------------------------
2. 无符号的变量判断时采用了>=0或<0之类的判断
BOOL   CGeneralCamera::Send(TCameraCommandItem& tItem ,u16 wSpeed/* = 0xffff*/)
{
	if( tItem.byCommandSize <=0 )
		return FALSE;

	TCameraCommandItem tCommand = tItem;
	//地址
	if( (tCommand.byAddrIdx >= 0 ) && 
		(tCommand.byAddrIdx <tCommand.byCommandSize ) )
	{
		tCommand.abyCommand[tCommand.byAddrIdx] = m_byAddr;
	}
------------------------------------------------------------------
3. 多个语句写在一行，进行连续赋值
 tCommand.abyCommand[byIdx] = 9 == tCommand.byCommandSize ?  ( u8 ) ( (0xFFFF - byCheckSum ) & 0xFF ) :  ( u8 ) ( byCheckSum & 0xFF );
------------------------------------------------------------------
4. memset前后参数不是同一个，容易写错导致内存越界
memset( &m_tHandle, 0, sizeof(THANDLE) );
memset( &m_tCallParam, 0, sizeof(TCALLPARAM) );
------------------------------------------------------------------
5. 函数参数直接使用结构体，容易把栈冲爆
u16 CMTVideoDecoder::SetNetFeedbackVideoParam(TNetRSParam tNetRSParam, BOOL32 bRepeatSnd)
------------------------------------------------------------------
6. 非逻辑变量与TRUE/FALSE进行比较
if (emPriomVideoEncoder == emComponent)
{
	StartVidCap(emPriomVideo,m_emPriomVidPort);
	StartVidEnc(emPriomVideoEncoder);

	CMtMPUtility::AddAddrToList(&m_tPVRmtAddr, &m_tPVSndAddr);
	StartVidSnd(emPriomVideoEncoder);

	m_emMPEncWorkMode = emMPSingleVideo;

	if (TRUE == m_byMonitor)  ???
	{
		UpdateMonitorParam();
	}
------------------------------------------------------------------
7. 变量、参数命名没有加类型，或类型不正确
inline BOOL CMtbCfgFileTransferService::CheckProtocol(const TFileTransfer& tFileInfo,u16 NACKMessage)

const u8 PCMTRefused         = 0;
const u8 PCHasLogined        = 1;
const u8 PCSoftwareError     = 2;

TMTAccountInfo* tAccountInfo = new TMTAccountInfo();
tAccountInfo->m_pWBReq = pWBReq;

EmMtOnlineState m_tState;                              // 在线状态
EmMtOnlineState m_tMaxState;                           // 最高级别在线状态

------------------------------------------------------------------
8. 直接写数字做为if或switch的判断条件
void AutoTestCamera(int type, int start)   
{
    TMtAutoTestMsg tAutoTestMsg;
    tAutoTestMsg.m_wProtocolIdentifer = MT_AUTOTEST_VER;
    if (type == 0)
    	tAutoTestMsg.m_emAutoTestType = emAutoTestCameraRotaFunc;
    if (type == 1)
    	tAutoTestMsg.m_emAutoTestType = emAutoTestCameraZoomFunc;
    if (type == 2)
    	tAutoTestMsg.m_emAutoTestType = emAutoTestCameraFocusFunc;

------------------------------------------------------------------
9. 没有定义无效值，变量直接与0比较，特别是句柄
void CXmppService::OnLogout( u8* pBuf, u16 wBufLen )
{
。。。。。。。。。。。。
    LibJingleEx::HANDLE  & hApp = m_ahXmppHandles[0];
    mtPrintf("====[ hApp = %p ] \n", hApp );

    if ( 0 == hApp )
    {
------------------------------------------------------------------
10. 出错分支未释放所有申请的资源
void *read_symtable(FILE *file, Elf32_Shdr *shdr, Elf32_Ehdr *ehdr, int *size)
{
	int sec_num;？？？
	int tb_size;？？
	void *sym;？？

	
	for (sec_num = 0; sec_num < ehdr->e_shnum; sec_num ++, shdr ++)
	{
		if (shdr->sh_type == SHT_SYMTAB)
			break;
	}	
	
	if (sec_num == ehdr->e_shnum)
	{
		printf("No symbol table\n");
		return NULL;
	}
	*size = tb_size = shdr->sh_size;
	
	sym = (void *)malloc(tb_size);
	if (sym ==NULL)
	{	
		printf("malloc error in func %s\r\n", __func__);
		return NULL;
	}
	if (fseek (file, shdr->sh_offset, SEEK_SET))
	{
		printf("fseek error\r\n");
		return NULL;
	}	

	if (fread(sym, tb_size, 1, file) != 1)
	{
		printf("read file error in func %s\r\n", __func__);
		return NULL;
	}	
	return sym;
}

------------------------------------------------------------------
11. 数组变量未与普通变量区分开
TMTRecordDetailInfo tMTRecordDetailInfo[MAXNUM_ENTRY_TABLE];
CMtLogCache::CMtLogCache(u32 dwMaxBufItem/* = MAX_LOG_COUNT*/)
	m_ptItemData = new TLogItem[dwMaxBufItem]; 
------------------------------------------------------------------
12. 数组清零时没有清掉最后一个字节，建议使用宏清零
memset((s8 *)m_achUserName, 0, MAXLEN_WHOLE_TUSER_NAME);
memset(m_achRegionName , 0 , MAXLEN_REGION);
memset(m_achOldPwd, 0, MAXLEN_PWD_KDM);
------------------------------------------------------------------
13. 无效值定义得过小，会有越界问题
tagAddrEntry() : dwEntryIndex( 0xFF )
------------------------------------------------------------------
14. 对多个变量进行绑定释放
void CMcmpCtrl::Destroy()
{
	if (m_pConf && m_pSpeech && m_pDiscuss 	)
	{
		delete m_pConf;
		m_pConf = NULL;

		delete m_pSpeech;
		m_pSpeech = NULL;

		delete m_pDiscuss;
		m_pDiscuss = NULL;
	}
------------------------------------------------------------------
15. 打印中没有换行或有多个换行
PrintRestLog( (s8*)"\n收到 ev_ValidateClientAccountCmd 验证用户 \n" );
------------------------------------------------------------------
16. 清空间时，计算大小不正确
pbyData = (u8*)malloc(dwLen*sizeof(s8) + 16);
if(NULL == pbyData)
{
	mtPrintf("[MtConfig FileName Error]malloc error ");
	return FALSE;
}
memset(pbyData, 0, sizeof(pbyData));
------------------------------------------------------------------
17. 数组参数蜕化为指针，导致大小计算不正确
BOOL CDirCtrl::GetMemberAliasByE164(s8 achMemberE164[], s8 achMemberAlias[])
{
     .....
    if (strlen(m_cDmsList.m_atUserArray[dwIndex].m_achMarkName) > 0)
    {
	memcpy(achMemberAlias, m_cDmsList.m_atUserArray[dwIndex].m_achMarkName, sizeof(achMemberAlias));
------------------------------------------------------------------
18. 逻辑变量直接清零进行初始化
memset(&m_bOnline, 0, sizeof(m_bOnline));
------------------------------------------------------------------
19. 变量命名意义不准确或用词不当
WARNING_EM_STATE_ERR_OVERLOGIN
ev_ConfConfInfoInd 
m_bConfHangupMode  =    FALSE; b还是Mode?
m_bMeetingChain 
m_bPipStat 意义不明确， state为什么是bool?
BOOL m_bChairWillBeSpeaker ; WillBe?
------------------------------------------------------------------
20. 函数进来就先定义一堆变量
void  CConfCtrl::MsgBoxProc( u32 dwMsgBoxIndex, u32 nRet )
{
	char achMsg[ MAX_BUFFER_LEN ] = { 0 };
	char abyLabel[2];
	if ( nRet == IDIGNORE )
	{
		return;
------------------------------------------------------------------
21. 代码写的冗余
 不需要if，只需在?:得出bAccept,直接发出去就好了
BOOL bAccept ;
if ( nRet == IDOK )
{
	//接收呼叫
	bAccept = TRUE;
	memcpy(achMsg, &m_tCurIncommingMT, sizeof(TMtId));
	memcpy(achMsg+sizeof(TMtId), &bAccept, sizeof(BOOL) );
	PostMsgToCtrl(ev_mcAcceptInd, achMsg, sizeof(TMtId)+sizeof(BOOL) );				
} else {
	//拒绝
	bAccept = FALSE;
	memcpy(achMsg, &m_tCurIncommingMT, sizeof(TMtId));
	memcpy(achMsg+sizeof(TMtId), &bAccept, sizeof(BOOL) );
	PostMsgToCtrl(ev_mcAcceptInd, achMsg, sizeof(TMtId)+sizeof(BOOL));
}


------------------------------------------------------------------
22. 变量赋予了随意的值，无法维护
if ( 0 == tCfg.dwGkIp)
{
	tCfg.dwGkIp = 1;
}
mtPrintf("[CMtH323ConfigService::OnGKDomainNameRsp]: receive GKAddr->"IPFORMAT",sourceIP―>"IPFORMAT", m_bInit―>%d!\n", u32ToIP(dwDstIp), u32ToIP(tGK.dwGKIP), m_bInit );
//	dwDstIp = 4262860298;  ???

------------------------------------------------------------------
23. 错误地判断数据为空的方法
s8 m_achDomain[MT_MAX_TUI_DOMAINNAME_LEN];
...
if( NULL ==  m_achDomain )
{
	MtLogWarn(emMDLSysapi, "fun(CMtDNSQuery::Query)DNS query domain is NULL!");
	return emDNS_FAILED;
}

------------------------------------------------------------------
24. 构造函数清零
class A
{
public:
     A() { memset(this, 0, sizeof(A)); }

    ...
}
------------------------------------------------------------------
25. 拿到指针后直接使用
EmUpgradeState emUpgradeState = GetUpgradeInstance()->GetState();
